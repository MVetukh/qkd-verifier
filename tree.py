#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏ (.vscode, .venv, .git –∏ —Ç.–¥.)
"""

import os
import pathlib

def should_ignore(path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É/—Ñ–∞–π–ª"""
    ignore_list = {'.vscode', '.venv', '.git', '__pycache__', '.pytest_cache', 
                   'node_modules', 'build', 'dist', '*.egg-info', '.coverage'}
    path_str = str(path)
    return any(ignore in path_str for ignore in ignore_list) or path.name.startswith('.')

def is_target_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ü–µ–ª–µ–≤—ã–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    target_extensions = {'.py', '.h', '.toml', '.yaml', '.yml', '.md', '.txt'}
    return file_path.suffix in target_extensions

def print_directory_structure(start_path, prefix="", is_last=True, is_root=True):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫"""
    if should_ignore(start_path) and not is_root:
        return
    
    if is_root:
        print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
        print(f"{start_path.name}/")
        prefix = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
    
    items = []
    try:
        items = sorted([item for item in start_path.iterdir() 
                       if not should_ignore(item)])
    except PermissionError:
        pass
    
    dirs = [item for item in items if item.is_dir()]
    files = [item for item in items if item.is_file() and is_target_file(item)]
    
    all_items = dirs + files
    
    for i, item in enumerate(all_items):
        is_last_item = i == len(all_items) - 1
        connector = "‚îî‚îÄ‚îÄ " if is_last_item else "‚îú‚îÄ‚îÄ "
        
        if item.is_dir():
            print(f"{prefix}{connector}{item.name}/")
            new_prefix = prefix + ("    " if is_last_item else "‚îÇ   ")
            print_directory_structure(item, new_prefix, is_last_item, False)
        else:
            print(f"{prefix}{connector}{item.name}")

def print_file_contents(start_path):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ü–µ–ª–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\n\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤:")
    print("=" * 60)
    
    for file_path in start_path.rglob('*'):
        if file_path.is_file() and is_target_file(file_path) and not should_ignore(file_path):
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
                if file_path.suffix in {'.py', '.h', '.toml', '.yaml', '.yml', '.md', '.txt'}:
                    content = file_path.read_text(encoding='utf-8', errors='ignore')
                    print(f"\nüéØ –§–∞–π–ª: {file_path.relative_to(start_path)}")
                    print("-" * 40)
                    print(content)
                    print("=" * 60)
            except (UnicodeDecodeError, PermissionError, Exception) as e:
                print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
                print("=" * 60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    current_dir = pathlib.Path.cwd()
    
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    print(f"üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    print()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    print_directory_structure(current_dir)
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    print_file_contents(current_dir)
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()